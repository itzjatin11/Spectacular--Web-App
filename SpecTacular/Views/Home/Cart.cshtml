@model List<SpecTacular.Models.CartItem>

@{
    ViewData["Title"] = "Shopping Cart";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #checkout-btn {
        background-color: #28a745;
        color: white;
        padding: 8px 20px;
        font-size: 16px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        width: 200px;
        display: block;
        margin: 20px auto;
    }

        #checkout-btn:hover {
            background-color: #218838;
        }

    .promotion {
        margin-top: 10px;
        padding: 10px;
        background-color: #f8d7da;
        color: #721c24;
        border-radius: 5px;
        display: none;
    }

        .promotion.success {
            background-color: #d4edda;
            color: #155724;
        }
</style>

<div class="container mt-5">
    <h2 class="fw-bold text-center">Your Shopping Cart</h2>

    <div class="table-responsive mt-4">
        <table class="table table-bordered text-center">
            <thead class="table-dark">
                <tr>
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="cart-items">
                @if (Model != null && Model.Any())
                {
                    @foreach (var item in Model)
                    {
                        var index = Model.IndexOf(item);
                        <tr data-index="@index">
                            <td class="align-middle">@item.Name</td>
                            <td class="align-middle">$@item.Price.ToString("0.00")</td>
                            <td class="align-middle">
                                <input type="number" class="form-control text-center quantity-input"
                                       data-index="@index" value="@item.Quantity" min="1">
                            </td>
                            <td class="align-middle total-price">$@((item.Price * item.Quantity).ToString("0.00"))</td>
                            <td class="align-middle">
                                <button class="btn btn-danger remove-item" data-index="@index">Remove</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" class="text-center fw-bold">Your cart is empty.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="text-end mt-3">
        <h4 class="fw-bold">Total Amount: $<span id="total-price">@(Model?.Sum(item => item.Price * item.Quantity) ?? 0).ToString("0.00")</span></h4>

        <div id="promotion-message" class="promotion">
            <p id="promotion-text"></p>
            <button id="claim-promotion" class="btn btn-warning">Claim Promotion</button>
        </div>

        <a asp-action="Checkout" class="btn btn-success btn-sm px-3" id="checkout-btn">Checkout</a>
    </div>
</div>

<!-- Modal for Checkout -->
<div class="modal fade" id="checkoutModal" tabindex="-1" aria-labelledby="checkoutModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="checkoutModalLabel">Checkout</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="checkout-form">
                    <div class="mb-3">
                        <label for="address" class="form-label">Address</label>
                        <input type="text" class="form-control" id="address" required>
                    </div>
                    <div class="mb-3">
                        <label for="phone" class="form-label">Phone Number</label>
                        <input type="text" class="form-control" id="phone" required>
                    </div>
                    <div class="mb-3">
                        <label for="additional-info" class="form-label">Additional Information</label>
                        <textarea class="form-control" id="additional-info"></textarea>
                    </div>
                    <div class="mb-3">
                        <button type="submit" class="btn btn-success">Complete Checkout</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let cart = JSON.parse(localStorage.getItem("cart")) || [];
            let activePromotions = [];
            let appliedDiscount = 0; // Store the applied discount percentage

            // Fetch active promotions
            $.ajax({
                url: '@Url.Action("GetActivePromotions", "Promotions")',
                type: 'GET',
                success: function (data) {
                    activePromotions = data;
                    updateCartUI(); // Update UI after fetching promotions
                },
                error: function () {
                    console.error("Error fetching promotions");
                    updateCartUI(); // Update UI even if promotions fail to load
                }
            });

            // Update Cart UI
            function updateCartUI() {
                let cartTable = document.querySelector("#cart-items");
                let totalAmount = 0;
                cartTable.innerHTML = "";

                if (cart.length === 0) {
                    cartTable.innerHTML = "<tr><td colspan='5' class='text-center fw-bold'>Your cart is empty.</td></tr>";
                    document.querySelector("#total-price").textContent = "0.00";
                    return;
                }

                cart.forEach((item, index) => {
                    let total = item.price * item.quantity;
                    totalAmount += total;

                    let row = `
                        <tr data-index="${index}">
                            <td class="align-middle">${item.name}</td>
                            <td class="align-middle">$${item.price.toFixed(2)}</td>
                            <td class="align-middle">
                                <input type="number" class="form-control text-center quantity-input"
                                       data-index="${index}" value="${item.quantity}" min="1">
                            </td>
                            <td class="align-middle total-price">$${total.toFixed(2)}</td>
                            <td class="align-middle">
                                <button class="btn btn-danger remove-item" data-index="${index}">Remove</button>
                            </td>
                        </tr>
                    `;
                    cartTable.innerHTML += row;
                });

                // Apply any previously claimed discount
                if (appliedDiscount > 0) {
                    totalAmount = totalAmount * (1 - appliedDiscount / 100);
                }

                document.querySelector("#total-price").textContent = totalAmount.toFixed(2);

                // Show applicable promotions
                showPromotionMessage(totalAmount);
            }

            // Show promotion message
            function showPromotionMessage(totalAmount) {
                let promotionMessage = document.getElementById("promotion-message");
                let promotionText = document.getElementById("promotion-text");
                let claimButton = document.getElementById("claim-promotion");

                // Find the best applicable promotion
                let applicablePromotion = activePromotions.find(p => totalAmount >= p.minPurchaseAmount);

                if (appliedDiscount > 0) {
                    // If a discount has already been applied, show success message
                    promotionMessage.style.display = "block";
                    promotionMessage.classList.add("success");
                    promotionText.textContent = `You have claimed a ${appliedDiscount}% discount!`;
                    claimButton.style.display = "none";
                } else if (applicablePromotion) {
                    // Show the best applicable promotion
                    promotionMessage.style.display = "block";
                    promotionMessage.classList.remove("success");
                    promotionText.textContent = `You qualify for a ${applicablePromotion.discountPercentage}% discount (${applicablePromotion.title})!`;
                    claimButton.style.display = "inline-block";

                    claimButton.onclick = function() {
                        appliedDiscount = applicablePromotion.discountPercentage;
                        applyDiscount(appliedDiscount);
                        promotionMessage.classList.add("success");
                        promotionText.textContent = `You have claimed a ${appliedDiscount}% discount!`;
                        claimButton.style.display = "none";
                    };
                } else {
                    promotionMessage.style.display = "none";
                }
            }

            // Apply discount to cart
            function applyDiscount(discountPercentage) {
                let totalAmount = 0;
                cart.forEach(item => {
                    totalAmount += item.price * item.quantity;
                });
                let discountedAmount = totalAmount * (1 - discountPercentage / 100);
                document.querySelector("#total-price").textContent = discountedAmount.toFixed(2);
            }

            // Checkout button click handler
            document.getElementById("checkout-btn").addEventListener("click", function (event) {
                event.preventDefault();
                if (cart.length === 0) {
                    alert("Your cart is empty!");
                    return;
                }

                let checkoutModal = new bootstrap.Modal(document.getElementById('checkoutModal'));
                checkoutModal.show();
            });

            // Handle form submission in the modal
            document.getElementById("checkout-form").addEventListener("submit", function (event) {
                event.preventDefault();

                let address = document.getElementById("address").value;
                let phone = document.getElementById("phone").value;
                let additionalInfo = document.getElementById("additional-info").value;

                if (!address || !phone) {
                    alert("Please fill in all required fields.");
                    return;
                }

                alert(`Checkout successful!\nAddress: ${address}\nPhone: ${phone}\nAdditional Info: ${additionalInfo || "None"}`);

                localStorage.removeItem("cart");

                let checkoutModal = bootstrap.Modal.getInstance(document.getElementById('checkoutModal'));
                checkoutModal.hide();

                window.location.href = "/";
            });

            // Update quantity event listener
            document.addEventListener("change", function (event) {
                if (event.target.classList.contains("quantity-input")) {
                    let index = event.target.getAttribute("data-index");
                    let newQuantity = parseInt(event.target.value);
                    if (newQuantity > 0) {
                        cart[index].quantity = newQuantity;
                        localStorage.setItem("cart", JSON.stringify(cart));
                        updateCartUI();
                    }
                }
            });

            // Remove item event listener
            document.addEventListener("click", function (event) {
                if (event.target.classList.contains("remove-item")) {
                    let index = event.target.getAttribute("data-index");
                    cart.splice(index, 1);
                    localStorage.setItem("cart", JSON.stringify(cart));
                    updateCartUI();
                }
            });

            // Initial UI update
            updateCartUI();
        });
    </script>
}